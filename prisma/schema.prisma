// Prisma Schema for Neon PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Users table
model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique @db.VarChar(255)
  passwordHash  String         @map("password_hash") @db.VarChar(255)
  name          String?        @db.VarChar(255)
  role          String         @default("user") @db.VarChar(50)
  organization  String?        @db.VarChar(100)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLogin     DateTime?      @map("last_login") @db.Timestamptz(6)
  isActive      Boolean        @default(true) @map("is_active")
  metadata      Json           @default("{}") @db.JsonB
  
  // Relations
  conversations  Conversation[]
  sessions       Session[]
  voiceSessions  VoiceSession[]
  llmBenchmarks  LlmBenchmark[]
  auditLogs      AuditLog[]
  
  @@index([email])
  @@index([role])
  @@map("users")
}

// Sessions table for auth
model Session {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  token      String    @unique @db.VarChar(500)
  expiresAt  DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  ipAddress  String?   @map("ip_address") @db.VarChar(45)
  userAgent  String?   @map("user_agent") @db.Text
  
  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

// Conversations table
model Conversation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  title     String    @default("New Conversation") @db.VarChar(255)
  model     String    @default("gpt-oss:120b-cloud") @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  voiceSessions VoiceSession[]
  llmBenchmarks LlmBenchmark[]
  
  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@map("conversations")
}

// Messages table
model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  role           String       @db.VarChar(20)
  content        String       @db.Text
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([createdAt])
  @@map("messages")
}

// Voice sessions table
model VoiceSession {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String?       @map("user_id") @db.Uuid
  conversationId String?       @map("conversation_id") @db.Uuid
  audioUrl       String?       @map("audio_url") @db.Text
  transcript     String?       @db.Text
  durationMs     Int?          @map("duration_ms")
  language       String        @default("en-US") @db.VarChar(10)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  metadata       Json          @default("{}") @db.JsonB
  
  // Relations
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([conversationId])
  @@map("voice_sessions")
}

// LLM Benchmarks table
model LlmBenchmark {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model             String        @db.VarChar(100)
  userId            String?       @map("user_id") @db.Uuid
  conversationId    String?       @map("conversation_id") @db.Uuid
  requestTimestamp  DateTime      @default(now()) @map("request_timestamp") @db.Timestamptz(6)
  responseTimestamp DateTime?     @map("response_timestamp") @db.Timestamptz(6)
  latencyMs         Int?          @map("latency_ms")
  tokensInput       Int?          @map("tokens_input")
  tokensOutput      Int?          @map("tokens_output")
  energyUsageMwh    Decimal?      @map("energy_usage_mwh") @db.Decimal(10, 4)
  success           Boolean       @default(true)
  errorMessage      String?       @map("error_message") @db.Text
  metadata          Json          @default("{}") @db.JsonB
  
  // Relations
  user              User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation      Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([model])
  @@index([userId])
  @@index([requestTimestamp(sort: Desc)])
  @@map("llm_benchmarks")
}

// System Monitoring table
model SystemMonitoring {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  timestamp      DateTime @default(now()) @db.Timestamptz(6)
  serviceName    String   @map("service_name") @db.VarChar(100)
  status         String   @db.VarChar(50)
  cpuUsage       Decimal? @map("cpu_usage") @db.Decimal(5, 2)
  memoryUsage    Decimal? @map("memory_usage") @db.Decimal(5, 2)
  responseTimeMs Int?     @map("response_time_ms")
  errorCount     Int      @default(0) @map("error_count")
  metadata       Json     @default("{}") @db.JsonB
  
  @@index([timestamp(sort: Desc)])
  @@index([serviceName])
  @@map("system_monitoring")
}

// Audit Logs table
model AuditLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  timestamp    DateTime @default(now()) @db.Timestamptz(6)
  userId       String?  @map("user_id") @db.Uuid
  action       String   @db.VarChar(100)
  resourceType String?  @map("resource_type") @db.VarChar(50)
  resourceId   String?  @map("resource_id") @db.Uuid
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  status       String?  @db.VarChar(20)
  details      Json     @default("{}") @db.JsonB
  
  // Relations
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([timestamp(sort: Desc)])
  @@index([action])
  @@map("audit_logs")
}

// Encryption Keys table for PQC
model EncryptionKey {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyId     String    @unique @map("key_id") @db.VarChar(100)
  algorithm String    @db.VarChar(50)
  publicKey String    @map("public_key") @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt DateTime? @map("expires_at") @db.Timestamptz(6)
  isActive  Boolean   @default(true) @map("is_active")
  metadata  Json      @default("{}") @db.JsonB
  
  @@map("encryption_keys")
}
