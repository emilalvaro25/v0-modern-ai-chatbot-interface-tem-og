version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hyperfocus-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_URL=${POSTGRES_URL}
      - UPSTASH_REDIS_URL=${UPSTASH_REDIS_URL}
      - UPSTASH_REDIS_TOKEN=${UPSTASH_REDIS_TOKEN}
      - UPSTASH_VECTOR_URL=${UPSTASH_VECTOR_URL}
      - UPSTASH_VECTOR_TOKEN=${UPSTASH_VECTOR_TOKEN}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyperfocus-network
    restart: unless-stopped

  # PostgreSQL Database (for local development)
  postgres:
    image: postgres:16-alpine
    container_name: hyperfocus-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-hyperfocus}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyperfocus-network
    restart: unless-stopped

  # Redis Cache (for local development)
  redis:
    image: redis:7-alpine
    container_name: hyperfocus-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyperfocus-network
    restart: unless-stopped

  # Swagger UI for API Documentation
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: hyperfocus-swagger
    ports:
      - "8080:8080"
    environment:
      SWAGGER_JSON_URL: http://localhost:3000/api/swagger
      BASE_URL: /docs
    networks:
      - hyperfocus-network
    restart: unless-stopped

  # Prisma Studio (optional - for database management)
  prisma-studio:
    image: node:20-alpine
    container_name: hyperfocus-prisma-studio
    working_dir: /app
    command: sh -c "npm install -g prisma && npx prisma studio"
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - .:/app
    depends_on:
      - postgres
    networks:
      - hyperfocus-network
    profiles:
      - dev

networks:
  hyperfocus-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
